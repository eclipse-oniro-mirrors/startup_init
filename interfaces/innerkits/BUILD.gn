# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//base/startup/init/begetd.gni")
if (!defined(ohos_lite) || init_feature_begetctl_liteos) {
  syspara_sources = [
    "syscap/init_syscap.c",
    "syspara/param_comm.c",
    "syspara/parameter.c",
    "syspara/sysversion.c",
  ]
}

config("exported_header_files") {
  visibility = [ ":*" ]
  include_dirs = [
    "//base/startup/init/interfaces/innerkits/include",
    "//base/startup/init/interfaces/innerkits/include/syspara",
    "//base/startup/init/interfaces/innerkits/include/token",
    "//base/startup/init/interfaces/innerkits/include/param",
  ]
}

include_common = [
  "./include",
  "//base/startup/init/interfaces/innerkits/include",
  "//base/startup/init/interfaces/innerkits/include/param",
  "//base/startup/init/interfaces/innerkits/fd_holder",
  "//base/startup/init/interfaces/innerkits/include/syspara",
  "//base/startup/init/interfaces/hals",
  "//base/startup/init/interfaces/innerkits/syspara",
  "//base/startup/init/services/param/include",
]

if (defined(ohos_lite)) {
  import("//build/lite/config/component/lite_component.gni")
  import("//build/lite/ndk/ndk.gni")

  if (ohos_kernel_type == "liteos_a" || ohos_kernel_type == "linux") {
    shared_library("libbegetutil") {
      cflags = [ "-fPIC" ]
      defines = [
        "_GNU_SOURCE",
        "OHOS_LITE",
      ]
      sources = []
      include_dirs = include_common
      public_configs = [ ":exported_header_files" ]
      deps = [
        "//base/hiviewdfx/hilog_lite/frameworks/featured:hilog_shared",
        "//base/startup/init/services/modules/init_hook:inithook",
      ]
      deps += [
        "//base/startup/init/services/log:init_log",
        "//base/startup/init/services/modules/udid:libudidcomm",
        "//base/startup/init/services/utils:libinit_utils",
      ]
      external_deps = [ "bounds_checking_function:libsec_shared" ]
      if (init_feature_begetctl_liteos) {
        sources += syspara_sources
        defines += [ "LITEOS_SUPPORT" ]
        deps += [ "$ohos_product_adapter_dir/utils/sys_param:hal_sysparam" ]
      } else {
        sources += [ "syscap/init_syscap.c" ]
      }
      if (ohos_kernel_type == "liteos_a") {
        defines += [ "__LITEOS_A__" ]
        deps +=
            [ "//base/startup/init/services/param/liteos:param_client_lite" ]
      } else if (ohos_kernel_type == "linux") {
        sources += [ "socket/init_socket.c" ]
        defines += [ "__LINUX__" ]
        deps += [
          "//base/startup/init/services/loopevent:loopevent",
          "//base/startup/init/services/param/base:param_base",
          "//base/startup/init/services/param/linux:param_client",
        ]
      }
    }

    static_library("libbegetutil_static") {
    }
  }
  if (ohos_kernel_type == "liteos_m") {
    static_library("libbegetutil") {
      public_configs = [ ":exported_header_files" ]
      defines = [
        "_GNU_SOURCE",
        "OHOS_LITE",
        "__LITEOS_M__",
      ]

      include_dirs = include_common
      include_dirs += [ "//base/hiviewdfx/hilog_lite/interfaces/native/kits" ]
      deps = [
        "//base/startup/init/services/modules/init_hook:inithook",
        "//base/startup/init/services/modules/udid:libudidcomm",
      ]
      external_deps = [ "bounds_checking_function:libsec_static" ]
      if (init_lite_no_log) {
        defines += [ "INIT_NO_LOG" ]
      } else {
        deps +=
            [ "//base/hiviewdfx/hilog_lite/frameworks/featured:hilog_static" ]
      }

      sources = []
      if (init_feature_begetctl_liteos) {
        PRODUCT_HAL_SYSPARAM_PATH =
            rebase_path("${ohos_product_adapter_dir}/utils/sys_param")
        cmd = "if [ -f ${PRODUCT_HAL_SYSPARAM_PATH}/BUILD.gn ]; then echo true; else echo false; fi"
        PRODUCT_HAL_SYSPARAM_EXISTS =
            exec_script("//build/lite/run_shell_cmd.py", [ cmd ], "value")
        if (PRODUCT_HAL_SYSPARAM_EXISTS) {
          deps += [ "$ohos_product_adapter_dir/utils/sys_param:hal_sysparam" ]
        }
        deps += [
          "//base/startup/init/interfaces/hals/utils/sys_param:hal_sys_param",
        ]
        defines += [ "LITEOS_SUPPORT" ]
        sources += syspara_sources
      } else {
        sources += [ "syscap/init_syscap.c" ]
      }

      if (init_feature_begetctl_liteos) {
        deps += [
          "//base/startup/init/services/param/liteos:param_client_lite",
          "//base/startup/init/services/utils:libinit_utils",
        ]
        if (!init_lite_no_log) {
          deps += [ "//base/startup/init/services/log:init_log" ]
        }
      }
    }

    static_library("libbegetutil_static") {
    }
  }

  lite_component("parameter") {
    features = [ ":libbegetutil" ]
  }

  ndk_lib("parameter_notes") {
    if (ohos_kernel_type != "liteos_m") {
      lib_extension = ".so"
    }
    deps = [ ":libbegetutil" ]
    head_files = [ "//base/startup/init/interfaces/innerkits/include/syspara" ]
  }

  group("libbeget_proxy") {
  }
} else {
  import("//build/config/components/idl_tool/idl.gni")
  import("//build/ohos.gni")

  config("init_idl_config") {
    include_dirs = [ "${target_gen_dir}" ]
  }

  idl_gen_interface("deviceinfo_interface") {
    sources = [ "IDeviceInfo.idl" ]
    log_domainid = "0xD002C08"
    log_tag = "DeviceInfoKits"
    part_name = "init"
    subsystem_name = "startup"
  }

  ohos_source_set("deviceinfo_proxy") {
    sanitize = {
      cfi = true
      cfi_cross_dso = true
      debug = false
    }
    output_values = get_target_outputs(":deviceinfo_interface")
    sources = filter_include(output_values, [ "*_info_proxy.cpp" ])
    public_configs = [ ":init_idl_config" ]
    deps = [ ":deviceinfo_interface" ]
    external_deps = [
      "c_utils:utils",
      "hilog:libhilog",
      "ipc:ipc_single",
      "samgr:samgr_proxy",
    ]
    part_name = "init"
    subsystem_name = "startup"
  }

  ohos_source_set("deviceinfo_stub") {
    sanitize = {
      cfi = true
      cfi_cross_dso = true
      debug = false
    }
    output_values = get_target_outputs(":deviceinfo_interface")
    sources = filter_include(output_values, [ "*_info_stub.cpp" ])
    public_configs = [ ":init_idl_config" ]
    deps = [ ":deviceinfo_interface" ]
    external_deps = [
      "c_utils:utils",
      "hilog:libhilog",
      "ipc:ipc_single",
    ]
    part_name = "init"
    subsystem_name = "startup"
  }

  idl_gen_interface("param_watcher_interface") {
    sources = [ "../../services/param/watcher/IWatcherManager.idl" ]
    sources_callback = [ "IWatcher.idl" ]
    log_domainid = "0xD002C03"
    log_tag = "PARAM_WATCHER"
    part_name = "init"
    subsystem_name = "startup"
  }

  ohos_source_set("param_watcher_proxy") {
    sanitize = {
      cfi = true
      cfi_cross_dso = true
      debug = false
    }
    output_values = get_target_outputs(":param_watcher_interface")
    sources = filter_include(output_values,
                             [
                               "*_manager_proxy.cpp",
                               "*watcher_stub.cpp",
                             ])
    public_configs = [ ":init_idl_config" ]
    deps = [ ":param_watcher_interface" ]
    external_deps = [
      "c_utils:utils",
      "hilog:libhilog",
      "ipc:ipc_single",
      "samgr:samgr_proxy",
    ]
    part_name = "init"
    subsystem_name = "startup"
  }

  ohos_source_set("param_watcher_stub") {
    sanitize = {
      cfi = true
      cfi_cross_dso = true
      debug = false
    }
    output_values = get_target_outputs(":param_watcher_interface")
    sources = filter_include(output_values,
                             [
                               "*_manager_stub.cpp",
                               "*watcher_proxy.cpp",
                             ])
    public_configs = [ ":init_idl_config" ]
    deps = [ ":param_watcher_interface" ]
    external_deps = [
      "c_utils:utils",
      "hilog:libhilog",
      "ipc:ipc_single",
      "samgr:samgr_proxy",
    ]
    part_name = "init"
    subsystem_name = "startup"
  }

  modulemgr_sources = [
    "hookmgr/hookmgr.c",
    "modulemgr/modulemgr.c",
  ]

  ohos_shared_library("libbegetutil") {
    sources = [
      "fd_holder/fd_holder.c",
      "reboot/init_reboot_innerkits.c",
      "service_control/service_control.c",
    ]
    sources += syspara_sources
    sources += [ "syspara/param_wrapper.cpp" ]
    sources += modulemgr_sources

    innerapi_tags = [
      "chipsetsdk_sp",
      "platformsdk",
      "sasdk",
    ]

    version_script = "libbegetutil.versionscript"

    defines = [
      "INIT_AGENT",
      "_GNU_SOURCE",
    ]
    if (target_cpu == "arm64" || target_cpu == "x86_64" ||
        target_cpu == "riscv64") {
      defines += [ "SUPPORT_64BIT" ]
    }

    include_dirs = include_common
    deps = [
      "//base/startup/init/interfaces/innerkits/control_fd:libcontrolfd",
      "//base/startup/init/interfaces/innerkits/fd_holder:fdholder",
      "//base/startup/init/interfaces/innerkits/file:libfile",
      "//base/startup/init/interfaces/innerkits/socket:libsocket",
      "//base/startup/init/services/log:agent_log",
      "//base/startup/init/services/loopevent:loopevent",
      "//base/startup/init/services/modules/udid:libudidcomm",
      "//base/startup/init/services/param/linux:param_client",
      "//base/startup/init/services/utils:libinit_utils",
    ]
    deps += [ "//base/startup/init/services/param/base:param_base" ]
    if (init_begetutil_extra_modules != "") {
      deps += [ init_begetutil_extra_modules ]
    }

    external_deps = [
      "bounds_checking_function:libsec_shared",
      "c_utils:utils",
      "config_policy:configpolicy_util_for_init_static",
      "hilog:libhilog_base",
    ]
    public_configs = [ ":exported_header_files" ]
    part_name = "init"
    subsystem_name = "startup"
    install_images = [
      "system",
      "updater",
    ]
  }

  # watcher lib must separate compilation avoid interdependence.
  ohos_shared_library("libbeget_proxy") {
    defines = [
      "INIT_AGENT",
      "_GNU_SOURCE",
    ]
    sources = [
      "//base/startup/init/device_info/device_info.cpp",
      "service_watcher/service_watcher.c",
    ]

    version_script = "libbeget_proxy.versionscript"

    include_dirs = include_common
    deps = [
      ":libbegetutil",
      "//base/startup/init/services/utils:libinit_utils",
    ]

    if (enable_ohos_startup_init_feature_watcher) {
      sources += [
        "//base/startup/init/services/param/watcher/agent/watcher.cpp",
        "//base/startup/init/services/param/watcher/agent/watcher_manager_kits.cpp",
      ]
      deps += [
        ":param_watcher_proxy",
        "//base/startup/init/services/param/linux:param_client",
      ]
      include_dirs += [
        "//base/startup/init/services/param/watcher/include",
        "//base/startup/init/services/log",
        "//base/startup/init/interfaces/innerkits/include/param",
      ]
    } else {
      defines += [ "NO_PARAM_WATCHER" ]
    }

    if (enable_ohos_startup_init_feature_deviceinfo) {
      sources += [
        "//base/startup/init/device_info/device_info_kits.cpp",
        "//base/startup/init/device_info/device_info_load.cpp",
      ]
      deps += [ ":deviceinfo_proxy" ]
      defines += [ "PARAM_FEATURE_DEVICEINFO" ]
      if (init_get_disk_sn) {
        defines += [ "PARAM_FEATURE_GET_DEVICE_SN" ]
      }
    } else {
      sources +=
          [ "//base/startup/init/interfaces/innerkits/syspara/param_comm.c" ]
    }

    external_deps = [
      "bounds_checking_function:libsec_shared",
      "c_utils:utils",
      "hilog:libhilog",
      "hilog:libhilog_base",
      "ipc:ipc_single",
      "samgr:samgr_proxy",
    ]
    public_configs = [ ":exported_header_files" ]
    innerapi_tags = [
      "chipsetsdk_sp",
      "platformsdk",
    ]
    part_name = "init"
    subsystem_name = "startup"
    install_images = [ "system" ]
  }

  if (default_toolchain == current_toolchain) {
    ohos_prebuilt_shared_library("libbegetutil-pub-sdk") {
      source = "${root_out_dir}/startup/init/libbegetutil.z.so"
      symlink_ext = [ "lib64/chipset-pub-sdk/libbegetutil.z.so" ]
      deps = [ "//base/startup/init/interfaces/innerkits:libbegetutil" ]
      install_enable = true
      install_images = [
        system_base_dir,
      ]
      relative_install_dir = "chipset-sdk-sp"
      part_name = "init"
      subsystem_name = "startup"
    }
  }

  ohos_static_library("libbegetutil_static") {
    sources = syspara_sources
    sources += [
      "reboot/init_reboot_innerkits.c",
      "syspara/param_wrapper.cpp",
    ]

    defines = [
      "INIT_AGENT",
      "_GNU_SOURCE",
    ]
    if (target_cpu == "arm64" || target_cpu == "x86_64" ||
        target_cpu == "riscv64") {
      defines += [ "SUPPORT_64BIT" ]
    }

    include_dirs = include_common
    deps = [
      "//base/startup/init/services/log:agent_log",
      "//base/startup/init/services/loopevent:loopevent",
      "//base/startup/init/services/modules/udid:libudidcomm_static",
      "//base/startup/init/services/param/linux:param_client",
      "//base/startup/init/services/utils:libinit_utils",
    ]
    deps += [ "//base/startup/init/services/param/base:param_base" ]
    external_deps = [
      "bounds_checking_function:libsec_static",
      "c_utils:utilsbase",
      "hilog:libhilog_base",
    ]
    public_configs = [ ":exported_header_files" ]
    part_name = "init"
    subsystem_name = "startup"
  }
}

group("innergroup") {
  deps = [ ":libbegetutil" ]
  if (build_seccomp) {
    deps += [ "seccomp:seccomp" ]
  }
  if (!defined(ohos_lite)) {
    deps += [
      ":libbeget_proxy",
      "file:libfile",
      "init_module_engine:modulegroup",
      "socket:libsocket",
    ]
    if (default_toolchain == current_toolchain) {
      deps += [ ":libbegetutil-pub-sdk" ]
    }
  } else {
  }
}
