# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//base/startup/init/begetd.gni")
import("//build/test.gni")

ohos_unittest("fstab_mount_unittest") {
  module_out_path = "init/init"
  include_dirs = [
    "//base/startup/init/test/unittest/single_test/fstab_mount/include",
    "//base/startup/init/services/init/include",
    "//base/startup/init/services/log",
    "//base/startup/init/services/init/standard",
    "//base/startup/init/interfaces/innerkits/include",
    "//base/startup/init/ueventd/include",
    "//base/startup/init/interfaces/innerkits/fs_manager/switch_root/include",
    "//base/startup/init/interfaces/innerkits/init_module_engine/include",
    "//base/startup/init/test/mock/libs/include"
  ]

  sources = [
    "//base/startup/init/interfaces/innerkits/fs_manager/fstab_mount.c",
    "//base/startup/init/test/unittest/single_test/fstab_mount/src/fstab_mount_test.cpp",
    "//base/startup/init/test/mock/libs/src/func_wrapper.cpp",
  ]

  cflags_cc = [ "-fexceptions" ]
  ldflags = [
    "-Wl,--wrap=strdup",
    "-Wl,--wrap=stat",
    "-Wl,--wrap=mount",
    "-Wl,--wrap=mkdir",
    "-Wl,--wrap=malloc",
    "-Wl,--wrap=strncat_s",
    "-Wl,--wrap=snprintf_s",
  ]
  deps = [
    "//base/startup/init/interfaces/innerkits:libbegetutil",
    "//base/startup/init/interfaces/innerkits/fs_manager:libfsmanager_static",
  ]

  defines = [
    "STARTUP_INIT_UT_PATH =\"/data/init_ut\"",
    "ASAN_DETECTOR",
    "STARTUP_INIT_TEST",
  ]

  configs = []

  external_deps = [
    "bounds_checking_function:libsec_static",
    "cJSON:cjson",
    "c_utils:utils",
    "googletest:gtest",
    "hilog:libhilog",
  ]
}
