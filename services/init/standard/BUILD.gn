# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//base/startup/init/begetd.gni")

init_common_sources = [
  "../init_capability.c",
  "../init_common_cmds.c",
  "../init_common_service.c",
  "../init_config.c",
  "../init_group_manager.c",
  "../init_service_file.c",
  "../init_service_manager.c",
  "../init_service_socket.c",
  "../main.c",
]

import("//build/ohos.gni")
import("//build/ohos/native_stub/native_stub.gni")

ohos_executable("init_early") {
  sources = [
    "//base/startup/init/interfaces/innerkits/hookmgr/hookmgr.c",
    "//base/startup/init/services/log/init_commlog.c",
    "bootstagehooker.c",
    "device.c",
    "init_firststage.c",
    "init_mount.c",
    "main_early.c",
    "switch_root.c",
  ]
  include_dirs = [
    "//base/startup/init/interfaces/innerkits/include",
    "//base/startup/init/services/init/include",
    "//base/startup/init/interfaces/innerkits/init_module_engine/include",
  ]
  configs = [ "//build/config/gcc:symbol_visibility_hidden" ]
  external_deps = [
    "bounds_checking_function:libsec_shared",
    "cJSON:cjson_static",
  ]
  deps = [
    "//base/startup/init/interfaces/innerkits/fs_manager:libfsmanager_static",
    "//base/startup/init/services/log:init_log",
    "//base/startup/init/ueventd:libueventd_ramdisk_static",
  ]
  if (startup_init_extra_static_modules != "") {
    deps += [ startup_init_extra_static_modules ]
  }
  install_images = [ "ramdisk" ]
  install_enable = true
  part_name = "init"
  subsystem_name = "startup"
}

ohos_executable("init") {
  sources = [
    "../adapter/init_adapter.c",
    "../standard/device.c",
    "../standard/fd_holder_service.c",
    "../standard/init.c",
    "../standard/init_cmdexecutor.c",
    "../standard/init_cmds.c",
    "../standard/init_control_fd_service.c",
    "../standard/init_firststage.c",
    "../standard/init_jobs.c",
    "../standard/init_mount.c",
    "../standard/init_reboot.c",
    "../standard/init_service.c",
    "../standard/init_signal_handler.c",
    "../standard/switch_root.c",
    "bootstagehooker.c",
  ]

  modulemgr_sources = [
    "//base/startup/init/interfaces/innerkits/hookmgr/hookmgr.c",
    "//base/startup/init/interfaces/innerkits/modulemgr/modulemgr.c",
  ]
  sources += modulemgr_sources
  sources += init_common_sources

  include_dirs = [
    "//base/startup/init/interfaces/innerkits/include/param",
    "//base/startup/init/services/init/include",
    "//base/startup/init/services/modules/reboot",
    "//base/startup/init/services/modules/init_context",
    "//base/startup/init/services/loopevent/task",
    "//base/startup/init/services/loopevent/loop",
    "//base/startup/init/services/loopevent/include",
    "//base/startup/init/interfaces/innerkits/include",
    "//base/startup/init/services/loopevent/utils",
  ]

  deps = [
    "//base/startup/init/interfaces/innerkits/control_fd:libcontrolfd",
    "//base/startup/init/interfaces/innerkits/fd_holder:fdholder",
    "//base/startup/init/interfaces/innerkits/fs_manager:libfsmanager_static",
    "//base/startup/init/services/loopevent:loopevent",
    "//base/startup/init/services/param/linux:param_init",
    "//base/startup/init/services/sandbox:sandbox",
    "//base/startup/init/services/utils:libinit_utils",
  ]
  deps += [ "//base/startup/init/services/param/base:param_base" ]
  external_deps = [
    "config_policy:configpolicy_util_for_init_static",
    "storage_service:libfscryptutils_static",
  ]

  deps += [ "//base/startup/init/ueventd:libueventd_ramdisk_static" ]
  external_deps += [ "storage_service:libfscryptutils_static" ]
  external_deps += [
    "bounds_checking_function:libsec_shared",
    "cJSON:cjson_static",
  ]

  deps += [ "//base/startup/init/interfaces/innerkits/init_module_engine:libinit_stub_versionscript" ]
  deps += [ "//base/startup/init/interfaces/innerkits/init_module_engine:init_module_engine_sources" ]
  deps += [ "//base/startup/init/services/modules:static_modules" ]
  external_deps += [
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "storage_service:libfscryptutils_static",
  ]
  cflags = []

  if (use_musl) {
    external_deps += [
      "mksh:sh",
      "toybox:toybox",
    ]
  }

  if (build_seccomp) {
    cflags += [ "-DWITH_SECCOMP" ]
  }

  if (build_variant == "root") {
    cflags += [ "-DIS_DEBUG_VERSION" ]
  }

  if (build_selinux) {
    external_deps += [ "selinux:libselinux" ]
    external_deps += [
      "selinux_adapter:libload_policy",
      "selinux_adapter:librestorecon",
    ]
    cflags += [ "-DWITH_SELINUX" ]
  }

  defines = [ "PARAM_SUPPORT_TRIGGER" ]
  if (param_test) {
    defines += [
      "OHOS_SERVICE_DUMP",
      "INIT_TEST",
    ]
  }

  if (target_cpu == "arm64" || target_cpu == "x86_64" ||
      target_cpu == "riscv64") {
    defines += [ "SUPPORT_64BIT" ]
  }

  if (defined(global_parts_info) &&
      defined(global_parts_info.developtools_hiprofiler)) {
    defines += [ "SUPPORT_PROFILER_HIDEBUG" ]
    external_deps += [ "hiprofiler:libhidebug_init" ]
  }
  if (asan_detector) {
    defines += [ "ASAN_DETECTOR" ]
  }
  if (startup_init_extra_static_modules != "") {
    deps += [ startup_init_extra_static_modules ]
  }

  version_script = get_label_info(
                       "//base/startup/init/interfaces/innerkits/init_module_engine:libinit_stub_versionscript",
                       "target_gen_dir") + "/" + get_label_info(
                       "//base/startup/init/interfaces/innerkits/init_module_engine:libinit_stub_versionscript",
                       "name") + stub_version_script_suffix
  defines += [ "_GNU_SOURCE" ]
  if (use_musl) {
    defines += [ "__MUSL__" ]
  }
  install_images = [
    "system",
    "updater",
  ]

  deps +=
      [ "//base/startup/init/services/modules/crashhandler:libcrashhandler" ]
  install_enable = true
  part_name = "init"
  subsystem_name = "startup"
}
